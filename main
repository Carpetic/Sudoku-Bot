#!/usr/bin/env python3

import cv2
import base64
import numpy as np
from os import remove
from time import sleep
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By

tab = [[0] * 9 for i in range(9)]
ref = [[0] * 9 for i in range(9)]

url = "https://sudoku.com/fr/evil/"

def predict_digit(img):

    #### LOAD TRAINED MODEL ####
    samples = np.loadtxt("generalsamples.data", np.float32)
    responses = np.loadtxt("generalresponses.data", np.float32)
    responses = responses.reshape((responses.size, 1))
    ##########################

    model = cv2.ml.KNearest_create()
    model.train(samples, cv2.ml.ROW_SAMPLE, responses)

    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    thresh = cv2.adaptiveThreshold(gray,255,1,1,11,2)
    out = np.zeros(img.shape,np.uint8)
    nbr = 0;
    contours, hierarchy = cv2.findContours(thresh,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)
    for cnt in contours:
        if cv2.contourArea(cnt) > 50:
            [x,y,w,h] = cv2.boundingRect(cnt)
            if  h > 28:
                cv2.rectangle(img, (x, y), (x + w, y + h),(0, 255, 0), 2)
                roi = thresh[y:y+h,x:x+w]
                roismall = cv2.resize(roi,(10,10))
                roismall = roismall.reshape((1,100))
                roismall = np.float32(roismall)
                retval, results, neigh_resp, dists = model.findNearest(roismall, k = 1)
                nbr = int((results[0][0]))
                cv2.putText(out,str(nbr),(x,y+h),0,1,(0,255,0))
    return nbr;

def get_board_image(driver):
    driver.get(url)
    driver.maximize_window()

    # wait for the page to load
    sleep(5)

    canvas = driver.find_element(by=By.TAG_NAME, value="canvas")

    # get the canvas as a PNG base64 string
    canvas_base64 = driver.execute_script("return arguments[0].toDataURL('image/png').substring(21);", canvas)

    canvas_png = base64.b64decode(canvas_base64)

    try:
        remove("canvas.png")
    except:
        pass

    # sleep(2)
    # save to a file
    f = open("canvas.png", "wb")
    f.write(canvas_png)
    f.close()
    # driver.quit()

    return canvas

def get_board_value():
    size = 111

    sleep(6)
    img = cv2.imread('canvas.png')

    for i in range(1, 10):
        for j in range(1, 10):
            crop_img = img[(i - 1) * size: i * size, (j - 1) * size: j * size]
            crop_img = crop_img[10:100, 10:100]
            tab[i - 1][j - 1] = predict_digit(crop_img)
            ref[i - 1][j - 1] = tab[i - 1][j - 1]
    

def get_key(number):
    if (number == 1):
        return Keys.NUMPAD1
    elif (number == 2):
        return Keys.NUMPAD2
    elif (number == 3):
        return Keys.NUMPAD3
    elif (number == 4):
        return Keys.NUMPAD4
    elif (number == 5):
        return Keys.NUMPAD5
    elif (number == 6):
        return Keys.NUMPAD6
    elif (number == 7):
        return Keys.NUMPAD7
    elif (number == 8):
        return Keys.NUMPAD8
    elif (number == 9):
        return Keys.NUMPAD9

def Update_slot(action, x, y, number):
    offset = 33
    key = get_key(number)

    action.send_keys(key).perform()    

def posibility(board, x, y):
    number = [1, 2, 3, 4, 5, 6, 7, 8, 9]

    # find posibility in row and col
    for num in range(9):
        try:
            number.remove(board[x][num])
        except:
            pass
        try:
            number.remove(board[num][y])
        except:
            pass

    # find posibility in 3x3
    X = (x // 3) * 3
    Y = (y // 3) * 3

    for i in range(X, X + 3):
        for j in range(Y, Y + 3):
            try:
                number.remove(board[i][j])
            except:
                pass

    return number

def solve():
    for x in range(9):
        for y in range(9):
            if tab[x][y] == 0:
                possible = posibility(tab, x, y)
                for n in possible:
                    tab[x][y] = n
                    if solve() != False:
                        return tab
                    tab[x][y] = 0
                return False

def print_board(board):
    for i in range(9):
        for j in range(9):
            print(board[i][j], end=" ")
            if j % 3 == 2:
                print(" ", end=" ")
        if (i % 3 == 2):
            print()
        print("")

def main():
    driver = webdriver.Firefox()
    action = webdriver.ActionChains(driver)
    canvas = get_board_image(driver)
    action.move_to_element(canvas).click().perform()
    action.move_by_offset(-230, -230).click().perform()
    get_board_value()
    solve()

    print_board(tab)
    print("--------------")
    print_board(ref)
    for i in range(9):
        for j in range(9):
            if ref[i][j] == 0:
                Update_slot(action, i, j, tab[i][j])
            action.move_by_offset(55, 0).click().perform()
        action.move_by_offset(-495, 55).click().perform()

    # cv2.destroyAllWindows()
    # print("\n")
    # print("Sudoku to solve:")
    # print("Sudoku solved:")

main()
